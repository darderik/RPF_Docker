//
// server.cfg
//
// comments are written with "//" in front of them.


// GLOBAL SETTINGS
hostname = "RPF Docker";		// The name of the server that shall be displayed in the public server list
password = "rpframework";							// Password for joining, eg connecting to the server
passwordAdmin = "xyz";					// Password to become server admin. When you're in Arma MP and connected to the server, type '#login xyz'
serverCommandPassword = "xyzxyz";		// Password required by alternate syntax of [[serverCommand]] server-side scripting.

// WELCOME MESSAGE ("message of the day")
// It can be several lines, separated by comma
// Empty messages "" will not be displayed at all but are only for increasing the interval
motd[] = {
	"", "",
	"RPFramework within a docker",
	"Greetings from docker",
	"", "",
	"",
	"https://github.com/RPFramework/RPFramework",
	"",
	""
};
motdInterval = 5;					// Time interval (in seconds) between each message


// JOINING RULES
maxPlayers = 12;					// Maximum amount of players. Civilians and watchers, beholder, bystanders and so on also count as player.
kickDuplicate = 1;					// Each ArmA version has its own ID. If kickDuplicate is set to 1, a player will be kicked when he joins a server where another player with the same ID is playing.
verifySignatures = 2;				// Verifies .pbos against .bisign files. Valid values 0 (disabled), 1 (prefer v2 sigs but accept v1 too) and 2 (only v2 sigs are allowed).
equalModRequired = 0;				// Outdated. If set to 1, player has to use exactly the same -mod= startup parameter as the server.
allowedFilePatching = 0;			// Allow or prevent client using -filePatching to join the server. 0, is disallow, 1 is allow HC, 2 is allow all clients (since Arma 3 1.49+)

// INGAME SETTINGS
disableVoN = 0;					// If set to 1, Voice over Net will not be available
vonCodec = 1; 					// If set to 1 then it uses IETF standard OPUS codec, if to 0 then it uses SPEEX codec (since Arma 3 update 1.58+)
vonCodecQuality = 30;			// since 1.62.95417 supports range 1-20 //since 1.63.x will supports range 1-30 //8kHz is 0-10, 16kHz is 11-20, 32kHz(48kHz) is 21-30
persistent = 1;					// If 1, missions still run on even after the last player disconnected.
timeStampFormat = "short";		// Set the timestamp format used on each report line in server-side RPT file. Possible values are "none" (default),"short","full".
BattlEye = 1;					// Server to use BattlEye system

// TIMEOUTS
disconnectTimeout = 5;			// Time to wait before disconnecting a user which temporarly lost connection. Range is 5 to 90 seconds.
maxDesync = 150;				// Max desync value until server kick the user
maxPing= 200;					// Max ping value until server kick the user
maxPacketLoss= 50;				// Max packetloss value until server kick the user
kickClientsOnSlowNetwork[] = { 0, 0, 0, 0 }; // Defines if {<MaxPing>, <MaxPacketLoss>, <MaxDesync>, <DisconnectTimeout>} will be logged (0) or kicked (1)
kickTimeout[] = { {0, -1}, {1, 180}, {2, 180}, {3, 180} };
votingTimeOut[] = {60, 90};		// Kicks users from server if they spend too much time in mission voting
roleTimeOut[] = {90, 120};		// Kicks users from server if they spend too much time in role selection
briefingTimeOut[] = {60, 90};	// Kicks users from server if they spend too much time in briefing (map) screen
debriefingTimeOut[] = {45, 60};	// Kicks users from server if they spend too much time in debriefing screen
lobbyIdleTimeout = 300;			// The amount of time the server will wait before force-starting a mission without a logged-in Admin.


// SCRIPTING ISSUES
onUserConnected = "";
onUserDisconnected = "";
doubleIdDetected = "";

// SIGNATURE VERIFICATION
onUnsignedData = "kick (_this select 0)";	// unsigned data detected
onHackedData = "kick (_this select 0)";		// tampering of the signature detected
onDifferentData = "";				// data with a valid signature, but different version than the one present on server detected


class Missions
{
	class Mission_1
	{
		template = "RPFramework.Altis";
		difficulty = "custom";
	};
};			// An empty Missions class means there will be no mission rotation